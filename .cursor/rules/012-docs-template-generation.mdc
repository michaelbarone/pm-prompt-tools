---
description: Generate document from template when prompted to create new document or create new program
globs: docs/templates/**/*.md
alwaysApply: false
---

# Document Template Generation

## Context
- Applies when creating new documents from templates
- Ensures consistent document creation process
- Maintains standardized document structure
- Guides through document completion with prompts
- Follows template structure defined in /docs/templates/template-structure.md
- Tracks document progress and decision history

## Requirements

### Template Types and Locations
```markdown
/docs/templates/
‚îú‚îÄ‚îÄ template-structure.md     # Master template structure guide
‚îú‚îÄ‚îÄ [type]-template.md       # Type-specific templates
```

### File Naming Convention
- Pattern: `[type]-[name].md`
- Valid document types:
  - program: Program documentation
  - feature: Feature specifications
  - design: Design documents
  - plan: Planning documents
  - api: API documentation
  - test: Test documentation
  - setup: Setup guides
  - release: Release notes
- Name portion requirements:
  - Use kebab-case
  - Be descriptive and concise
  - Avoid special characters
  - Maximum length: 50 characters (excluding type prefix)

### Document Generation Process
1. Initial Prompt Recognition:
   - Trigger: "let's create a new [type] document"
   - Validate [type] exists in /docs/templates/
   - Identify correct template source
   - Ask ONLY Initial Prompt questions from template
   - Generate filename following naming convention: /docs/output/[type]-[name].md

2. Template Copy Phase:
   - Create output directory if needed
   - Copy template EXACTLY to destination without modifications
   - Initialize with current timestamp
   - Mark Initial Prompt section as complete with provided answers
   - Mark all other sections as pending manual entry

3. Manual Entry Phase:
   - User works directly on the document
   - AI waits for user to complete manual entries
   - No AI intervention during this phase
   - User signals when manual entries are complete

4. Remaining Sections Phase:
   - Only begins after user signals manual entry completion
   - AI and user collaborate to complete remaining sections
   - Follow template section order
   - Respect section dependencies
   - Generate section-specific questions as needed

5. Progress Tracking:
   ```markdown
   [‚úì] Complete - All required information provided
   [?] Awaiting Input - Missing required information
   [!] Dependency Blocked - Waiting for other sections
   [ ] Not Started - Section not yet addressed
   ```

5. Progress History Section:
   - Add as final section in all documents
   - Format timestamps using system commands:
     ```powershell
     Get-Date -Format "yyyy-MM-dd HH:mm"
     ```
     ```bash
     date "+%Y-%m-%d %H:%M"
     ```
   - Include both PowerShell and Bash timestamps
   - Structure with emoji indicators
   - Track decisions, issues, documentation updates, and next steps
   - Maintain chronological order (newest first)
   
   Progress History Structure:
   ```markdown
   ## Progress History

   ### {yyyy-MM-dd HH:mm} - {Brief Title}

   - ü§î Decisions: {decisions made}
   - ‚ùå Issues: {problems encountered}
   - üìö Documentation: {documentation updates}
   - ‚è≠Ô∏è Next: {next steps}
   ```

## Examples

### Valid Document Names
```markdown
- program-self-service-pos-integrations.md
- feature-oauth-authentication.md
- design-database-schema.md
- plan-q2-roadmap.md
```

### Invalid Document Names
```markdown
- self-service-pos-integrations.md (missing type prefix)
- program_pos_integration.md (using underscores)
- program-POS-Integration.md (using uppercase)
- design--database-schema.md (double hyphens)
```

### Document Creation Flow
<example>
User: "let's create a new program document"

AI: "I'll help you create a program document. First, let's complete the Initial Context section:

[!] Initial Context - Required Questions:
1. What is the program name?
2. What is the elevator pitch?

User: "The name is 'Customer Portal Enhancement'"

AI: *Creates file as 'program-customer-portal-enhancement.md'*
*Updates Initial Context section with provided name*

"I've recorded the program name. To complete the Initial Context, I still need:
[?] elevator pitch

[Process continues with clear dependency tracking]
</example>

<example type="invalid">
User: "let's create a new program document"

AI: *Attempts to fill out Impact Assessment before completing Initial Context*
*Skips dependency validation*

[Incorrect: Must complete Initial Context first and respect dependencies]
</example>

### Document Update Process
1. Post-Generation Updates:
   - ALL changes after initial document generation require explicit confirmation
   - Each change must be presented as a decision point
   - Format decision points as:
     ```markdown
     [?] Decision Required: {brief description}
     - Current State: {what exists now}
     - Proposed Change: {what will change}
     - Rationale: {why this change is needed}
     - Impact: {what this affects}
     ```
   - Wait for user confirmation before applying changes
   - Document all decisions in Progress History
   - Track declined/modified decisions separately

2. Decision Tracking:
   ```markdown
   ## Decision Log

   ### {yyyy-MM-dd HH:mm} - {Decision Category}
   - üìã Proposal: {what was proposed}
   - ‚úÖ Approved/‚ùå Declined/üîÑ Modified
   - üìù Final Implementation: {what was actually done}
   - üîç Impact: {what this affected}
   ```

3. Batch Updates:
   - Group related changes when possible
   - Present all changes in the batch before proceeding
   - Allow partial acceptance of batch
   - Document both accepted and rejected changes

### Examples

#### Valid Decision Confirmation
<example>
AI: "I propose the following changes to the Impact Assessment:

[?] Decision Required: Update External Impact Level
- Current State: Low impact rating
- Proposed Change: Change to High impact
- Rationale: Aligns with critical nature of financial/data issues
- Impact: Affects stakeholder perception and prioritization

User: "Approved"

AI: *Updates document and adds to Decision Log*

### 2024-03-26 23:00 - Impact Assessment Update
- üìã Proposal: Change External Impact from Low to High
- ‚úÖ Approved
- üìù Final: Updated impact level and aligned documentation
- üîç Impact: Modified stakeholder expectations
</example>

#### Invalid Update Process
<example type="invalid">
AI: *Makes multiple significant changes without confirmation*
*Doesn't document decisions in Progress History*
*Modifies template structure without approval*

[Incorrect: Changes must be proposed and confirmed first]
</example>

### Post-Update Review Process
1. Immediate Review Requirements:
   ```markdown
   After ANY document update:
   
   [?] Impact Analysis Required
   - Which sections might be affected by this change?
   - Are there any inconsistencies created?
   - Do any related sections need updates?
   
   [?] Document Integrity Check
   - Are all sections still properly formatted?
   - Do all cross-references still make sense?
   - Are all dependencies still valid?
   
   [?] Content Alignment Review
   - Does the change align with the document's purpose?
   - Are there any contradictions created?
   - Do any objectives or metrics need adjustment?
   ```

2. Review Checklist:
   ```markdown
   After each update, verify:
   
   Document Structure:
   - [ ] All sections properly formatted
   - [ ] No broken cross-references
   - [ ] Dependencies still valid
   
   Content Consistency:
   - [ ] No contradictions between sections
   - [ ] All metrics and objectives aligned
   - [ ] Impact properly reflected throughout
   
   Related Updates:
   - [ ] Identified affected sections
   - [ ] Made necessary related changes
   - [ ] Updated Progress History
   ```

3. User Prompting:
   ```markdown
   Required Questions After Updates:
   1. "Should we review any other sections for consistency?"
   2. "Are there any related metrics or objectives that need adjustment?"
   3. "Does this change affect any assumptions or validations?"
   4. "Should we update the Progress History with any additional context?"
   ```

## Critical Rules
- ALWAYS check for resources first before creating them
- ALWAYS verify template type exists before proceeding
- ALWAYS establish output location first
- NEVER modify template source files
- ALWAYS use system timestamp for document creation
- ALWAYS follow template structure exactly
- NEVER skip required questions
- ALWAYS validate responses match expected format
- ALWAYS prefix document files with [type]-
- ALWAYS use kebab-case for the entire filename
- NEVER use special characters or spaces in filenames
- NEVER skip the type prefix
- NEVER use uppercase letters in filenames
- NEVER populate sections without explicit user input
- ALWAYS track and display section completion status
- ALWAYS ask for clarification on incomplete sections
- NEVER assume information for unfilled sections
- ALWAYS show progress and remaining sections after each update
- ALWAYS complete Initial Context before other sections
- NEVER skip dependency checks when updating sections
- ALWAYS allow for Manual Entry updates
- NEVER remove or modify template section structure
- ALWAYS track section completion status
- ALWAYS validate dependencies before marking sections complete
- ALWAYS follow template-structure.md guidelines
- NEVER proceed past Initial Context until all required fields are complete
- ALWAYS add Progress History as final section
- ALWAYS use system commands for timestamps
- ALWAYS include both PowerShell and Bash timestamps
- ALWAYS use specified emoji indicators for progress entries
- ALWAYS include all four tracking categories (Decisions, Issues, Documentation, Next)
- ALWAYS add empty line before Progress History section
- ALWAYS put newest progress entries at top
- NEVER use manual timestamps
- NEVER skip any progress tracking categories
- NEVER modify existing progress entries
- NEVER remove Progress History section once added
- ALWAYS copy complete sections from template files
- NEVER modify template-defined section structure
- ALWAYS preserve template comments and guidance
- ALWAYS maintain template-defined formatting
- ALWAYS include all template-required sections
- NEVER skip template-defined sections
- ALWAYS preserve template-defined options
- NEVER modify predefined options without template update
- ALWAYS copy template EXACTLY without modifications beyond Initial Prompt answers
- NEVER prompt for information beyond Initial Prompt section until manual entry phase complete
- ALWAYS wait for user to signal manual entry completion
- NEVER modify manual entry sections without explicit user request
- ALWAYS respect the three-phase process: Initial Prompt -> Manual Entry -> Remaining Sections
- ALWAYS propose changes after initial document creation
- NEVER make post-generation changes without confirmation
- ALWAYS format decision points with all required fields
- ALWAYS document decisions in Progress History
- ALWAYS maintain a Decision Log for significant changes
- NEVER batch unrelated changes together
- ALWAYS allow partial acceptance of batch changes
- ALWAYS track declined and modified decisions
- NEVER proceed with changes until explicitly approved
- ALWAYS include rationale and impact for proposed changes
- ALWAYS update timestamps when changes are approved
- NEVER modify template structure without approval
- ALWAYS preserve previous decision history
- NEVER overwrite or remove past decisions
- ALWAYS track decision outcomes (Approved/Declined/Modified)
- ALWAYS perform post-update document review
- ALWAYS prompt user about potential related changes
- NEVER skip impact analysis after updates
- ALWAYS verify document consistency after changes
- NEVER assume changes are isolated
- ALWAYS check for cross-section dependencies
- ALWAYS use the post-update review checklist
- NEVER skip user prompting after updates
- ALWAYS document review findings in Progress History

metadata:
  priority: high
  version: 1.5.0
  tags:
    - documentation
    - templates
    - generation
    - decision-tracking
    - change-management 