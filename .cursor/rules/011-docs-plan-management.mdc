---
description: Standardized approach for problem analysis, solution design, and implementation planning
globs: **/docs/{working-memory,features,templates}/**/*.md
alwaysApply: false
---

# Problem-Solving Approach and Plan Management

<rule>
name: problem_solving_approach
description: Framework for analyzing problems, designing solutions, and structuring documentation content

## Cross-Rule Dependencies

This rule focuses on WHAT to document and how to structure problem-solving approaches. For guidance on documentation management and memory systems, refer to:
- [010-docs-memory-knowledge-management.mdc] - Memory management and documentation maintenance
  - Use for documentation storage strategy
  - Follow for memory management practices
  - Reference for cross-referencing standards

## Documentation Integration

When creating documentation, coordinate between rules:

1. Content Structure (This Rule):
   - What information to capture
   - Required sections and fields
   - Analysis frameworks
   - Solution templates

2. Memory Management ([docs-memory-knowledge-management]):
   - Where to store documentation
   - How to maintain versions
   - When to update documentation
   - Cross-reference management

## Problem Analysis Phase Integration

When analyzing problems:

1. Analysis Structure (This Rule):
   - Problem statement format
   - Required analysis sections
   - Impact assessment framework
   - Solution evaluation criteria

2. Documentation Management ([docs-memory-knowledge-management]):
   - Working memory updates
   - Project memory integration
   - Cross-reference tracking
   - Version management

## Implementation Planning Integration

When planning implementations:

1. Planning Structure (This Rule):
   - Milestone definition format
   - Task breakdown approach
   - Risk assessment framework
   - Testing strategy structure

2. Memory Management ([docs-memory-knowledge-management]):
   - Documentation update strategy
   - Progress tracking approach
   - Cross-reference maintenance
   - Version control practices

## Documentation Standards

### Component Documentation
```typescript
/**
 * LoginForm Component
 * @component
 * @description Handles user authentication through form submission
 *
 * @example
 * ```tsx
 * <LoginForm
 *   onSuccess={handleSuccess}
 *   redirectPath="/dashboard"
 * />
 * ```
 */
interface LoginFormProps {
  /** Callback fired when login succeeds */
  onSuccess: (user: User) => void;
  /** Path to redirect after successful login */
  redirectPath?: string;
}
```

### State Management Documentation
```typescript
/**
 * Authentication State
 * @typedef {Object} AuthState
 *
 * @example
 * ```tsx
 * const [authState, dispatch] = useReducer(authReducer, initialState);
 * ```
 */
interface AuthState {
  /** Current user object, null if not authenticated */
  user: User | null;
  /** Loading state for auth operations */
  loading: boolean;
  /** Last error message if any */
  error?: string;
}
```

### Type Documentation Requirements
1. Required Documentation:
   - Every exported type must have JSDoc comment
   - Each field must have inline JSDoc
   - Include value ranges for numeric fields
   - Document optional fields
   - Explain type relationships
   - Note validation requirements
   - Document default values
   - Include usage examples

2. Code Sample Guidelines:
   - Always precede code with explanatory text
   - Include parameter descriptions
   - Explain return values
   - Add usage examples where helpful
   - Keep code samples focused and minimal

## Problem-Solving Approach

1. Documentation Issue Analysis:
   - Identify affected documentation
   - List impacted components
   - Check cross-references
   - Verify template compliance

2. Solution Design:
   - Plan documentation updates
   - Consider cross-reference impacts
   - Evaluate template changes
   - Plan validation steps

3. Implementation Steps:
   - Update affected documents
   - Validate cross-references
   - Verify template compliance
   - Update timestamps

filters:
  - type: file_extension
    pattern: "\\.md$"
  - type: content
    pattern: "(Problem Analysis|Solution Design|Implementation Plan)"
actions:
  - type: suggest
    message: |
      Problem-Solving Framework:

      1. Problem Analysis Phase:
         a) Issue Identification:
            - Clear problem statement
            - Scope definition
            - Impact assessment
            - User/system perspective

         b) Root Cause Analysis:
            - List potential causes
            - Evidence gathering
            - Pattern identification
            - Historical context

         c) System Impact:
            - Affected components
            - Downstream effects
            - Performance implications
            - Security considerations

         d) Documentation Review:
            - Related issues
            - Previous solutions
            - Existing constraints
            - Technical debt impact

         e) Specialized Analysis:
            - For API issues: Follow api_debugging_methodology rule
            - For UI issues: Follow ui_debugging rule
            - For performance issues: Follow performance_debugging rule
            - For security issues: Follow security_debugging rule

      2. Solution Design Phase:
         a) Solution Brainstorming:
            - Multiple approaches
            - Innovation opportunities
            - Industry best practices
            - Team expertise leverage

         b) Evaluation Criteria:
            - Performance impact
            - Maintainability
            - Scalability
            - Security implications
            - Resource requirements

         c) Trade-off Analysis:
            - Pros and cons matrix
            - Risk assessment
            - Cost-benefit analysis
            - Timeline implications

         d) Solution Validation:
            - Technical feasibility
            - Resource availability
            - Timeline viability
            - Stakeholder alignment

         e) Specialized Solutions:
            - For API issues: Use api_debugging_methodology tools and patterns
            - For UI issues: Use UI debugging patterns
            - For performance issues: Use performance optimization patterns
            - For security issues: Use security hardening patterns

      3. Implementation Planning Phase:
         a) Task Breakdown:
            - Step-by-step plan
            - Dependencies mapping
            - Critical path identification
            - Milestone definition

         b) Milestone Addition Protocol:
            1. Required Questions:
               - Scope Definition:
                 ```markdown
                 - When should this milestone be available/active?
                 - What triggers this milestone to start/end?
                 - Are there any prerequisites or conditions?
                 - Should this block other functionality?
                 ```

               - Feature Requirements:
                 ```markdown
                 - What specific functionality is needed?
                 - What UI/UX elements are required?
                 - Can we reuse existing functionality?
                 - What new components need to be created?
                 ```

               - Security & Performance:
                 ```markdown
                 - Are there security implications?
                 - Should we implement immediate security measures?
                 - Should we create future security tasks?
                 - Are there performance considerations?
                 ```

               - User Experience:
                 ```markdown
                 - What guidance/documentation is needed?
                 - What error states should we handle?
                 - What happens after milestone completion?
                 - Do we need cancellation/rollback?
                 ```

            2. Documentation Updates:
               - Task Plan (.plan):
                 ```markdown
                 - Add to Requirements section with subtasks
                 - Update Affected Components
                 - Add new Dependencies
                 - Update Current Status
                 - Add Progress History entry
                 - Update Documentation needs
                 ```

               - Project Plan (plan.md):
                 ```markdown
                 - Add milestone with clear description
                 - Update Progress section
                 - Note any dependencies or blockers
                 - Include implementation approach
                 ```

            3. Critical Rules:
               - ALWAYS ask all required questions before adding milestone
               - NEVER add milestone without updating both .plan and plan.md
               - ALWAYS consider security implications
               - ALWAYS check for reusable functionality
               - ALWAYS document future tasks for deferred work
               - ALWAYS document task relationships:
                 - Link future tasks to relevant active tasks
                 - Link future tasks to completed tasks they build upon
                 - Include brief explanations of relationships
                 - Update relationships when tasks move between states

            4. Examples:
               <example>
               # Good: Comprehensive Milestone Addition
               1. Asked all required questions
               2. Updated both .plan and plan.md
               3. Included implementation details
               4. Noted security considerations
               5. Documented dependencies

               ## Questions Asked:
               - When is milestone active?
               - What functionality needed?
               - Security implications?
               - User experience details?

               ## Updates Made:
               - Added detailed requirements
               - Updated affected components
               - Noted dependencies
               - Created security followup
               </example>

               <example type="invalid">
               # Bad: Incomplete Milestone Addition
               1. Added milestone without questions
               2. Updated only plan.md
               3. No implementation details
               4. No security consideration
               5. Missing dependencies

               ## Missing:
               - No scope definition
               - No security review
               - Incomplete documentation
               - No dependency check
               </example>

         c) Risk Management:
            - Potential blockers
            - Mitigation strategies
            - Fallback plans
            - Recovery procedures

         d) Testing Strategy:
            - Test coverage requirements
            - Test case definition
            - Performance benchmarks
            - Security validation

         e) Documentation Planning:
            - Documentation Impact Analysis:
              - Project Memory Updates:
                - Required /docs/features/ updates
                - Architecture documentation changes
                - API documentation modifications
                - Component documentation updates

              - Working Memory Integration:
                - Link task plan to affected feature docs
                - Track documentation debt in progress history
                - Document component changes in real-time
                - Reference architectural decisions

              - Documentation Templates:
                - Identify required template updates
                - Follow template standards from /docs/templates/
                - Document any template deviations
                - Propose template improvements

            - Documentation Update Strategy:
              - Pre-implementation updates
              - During-implementation tracking
              - Post-implementation verification
              - Cross-reference validation

            - Documentation Dependencies:
              - Feature documentation links
              - Component documentation references
              - API documentation connections
              - Architecture documentation ties

            - Documentation Review Plan:
              - Template compliance check
              - Cross-reference validation
              - Link verification process
              - Content accuracy review

         f) Specialized Testing:
            - For API issues: Follow api_debugging_methodology test patterns
              ```ruby
              # Example API test structure from api_debugging_methodology
              RSpec.describe ApiClient do
                describe 'configuration' do
                  it 'loads environment variables' do
                    # Test env vars
                  end

                  it 'configures the client properly' do
                    # Test client setup
                  end
                end
              end
              ```

      4. Documentation Template:
         ```markdown
         ## Task Status Notation
         - Use [X] (capital X) for completed tasks
         - Use [ ] for incomplete tasks
         - Never use [x] (lowercase x)
         Example:
         - [X] Completed task
         - [ ] Incomplete task
         - [X] Another completed task

         ## Future Tasks

         ### [Task Name]
         - **Description**: [Clear task description]
         - **Priority**: [High/Medium/Low]
         - **Estimated Effort**: [Duration]
         - **Related Tasks**:
           - Active: [Task Name] (explanation of relationship)
           - Completed: [Task Name] (explanation of relationship)
           - Future: [Task Name] (explanation of relationship)

         ## Problem Analysis

         ### Issue Description
         - What: [Clear problem statement]
         - Why: [Business/technical impact]
         - Who: [Affected users/systems]
         - When: [Occurrence pattern]
         - Type: [Issue type - API/UI/Performance/Security]

         ### Steps
         1. [X] Completed step
            - Tasks:
              - [X] Completed task 1.1
              - [X] Completed task 1.2
            - Dependencies:
              - [List dependencies]

         2. [ ] Pending step
            - Tasks:
              - [ ] Task 2.1
              - [ ] Task 2.2
            - Dependencies:
              - [List dependencies]

         ### Root Cause
         - Identified causes:
           1. [Primary cause]
           2. [Secondary factors]
         - Evidence:
           - [Supporting data]
           - [Observations]

         ### System Impact
         - Components:
           - [List affected systems]
         - Dependencies:
           - [Upstream/downstream effects]

         ### Specialized Analysis
         - If API issue:
           - Follow api_debugging_methodology steps
           - Include debug script results
           - Document VCR test results

         ## Solution Design

         ### Proposed Solutions
         1. Solution A:
            - Approach: [Description]
            - Pros: [Benefits]
            - Cons: [Drawbacks]
            - Risks: [Potential issues]

         2. Solution B:
            - Approach: [Description]
            - Pros: [Benefits]
            - Cons: [Drawbacks]
            - Risks: [Potential issues]

         ### Selected Solution
         - Choice: [Solution name]
         - Rationale: [Decision factors]
         - Trade-offs: [Accepted compromises]
         - Specialized Approach:
           - For API: Follow api_debugging_methodology patterns
           - For UI: Follow UI patterns
           - For Performance: Follow optimization patterns
           - For Security: Follow security patterns

         ## Implementation Plan

         ### Steps
         1. [ ] Step 1
            - Tasks:
              - [X] Task 1.1 (completed)
              - [ ] Task 1.2
            - Dependencies:
              - [List dependencies]
            - Specialized Steps:
              - Follow relevant methodology (API/UI/Performance/Security)

         ### Risk Mitigation
         - Risks:
           1. [Risk description]
              - Mitigation: [Strategy]
              - Fallback: [Plan B]

         ### Testing
         - Test cases:
           1. [Test scenario]
           2. [Test scenario]
         - Performance:
           - [Benchmarks]
         - Specialized Testing:
           - Follow relevant testing methodology
         ```

      Remember:
      - Document all decisions
      - Consider long-term impact
      - Validate assumptions
      - Plan for failure scenarios
      - Keep documentation current
      - Use specialized methodologies when applicable
      - Reference specific debugging rules for different types of issues

      5. Plan File Maintenance:
         a) Task Plan Files (.plan):
            - Located in task directory under /docs/working-memory/open/{task-id}/.plan
            - Must be updated in real-time as work progresses
            - Use [X] for completed items, [ ] for pending items
            - Include timestamps for all updates
            ```markdown
            ## Current Status
            ### 2025-03-19 15:45

            **Status**: In Progress
            - [X] Visual Design Updates completed
            - [ ] Accessibility Enhancements pending
            ```

         b) Main Project Plan (plan.md):
            - Located in /docs/working-memory/plan.md
            - Must be synchronized with individual task plans
            - Update task status and milestones immediately when changed
            - Maintain consistent formatting across all sections
            ```markdown
            ### Task Name (In Progress)
            - **Location**: `/docs/working-memory/open/task-name`
            - **Status**: In Progress
            - **Key Milestones**:
              - [X] Completed milestone
              - [ ] Pending milestone
            ```

         c) Plan Synchronization Rules:
            - Always update both .plan and plan.md together
            - Never leave plans in inconsistent states
            - Use identical milestone names across both files
            - Maintain same completion status ([X] or [ ]) in both files
            - Include progress summaries in plan.md when updating status

         d) Status Updates:
            - Add new progress entries with timestamps
            - Document completed items immediately
            - Note any blockers or dependencies
            - Update affected documentation
            ```markdown
            ## Progress History
            ### 2025-03-19 15:45 - Milestone Completion
            - ✓ Completed: Visual design updates
            - 🤔 Decisions: Selected modern design pattern
            - ❌ Issues: None
            - 📚 Documentation: Updated component docs
            - ⏭️ Next: Begin accessibility enhancements
            ```

## Examples

  - input: |
      // Problem: API authentication failing
      // Using api_debugging_methodology:
      // 1. Created debug script
      // 2. Verified environment variables
      // 3. Added VCR tests
      // 4. Fixed credential encoding
    output: |
      Systematic debugging approach applied using specialized methodology

  - input: |
      Problem Analysis:
      - API N+1 query in user dashboard
      - Using api_debugging_methodology for analysis
      - Affecting performance at scale
      - Identified in monitoring

      Solution Design:
      - Implement eager loading
      - Add query optimization
      - Update indexes

      Implementation Plan:
      - Add includes statements
      - Update controller logic
      - Add performance tests
    output: |
      Complete problem-solving approach applied with specialized methodology

metadata:
  priority: high
  version: 1.0
  tags:
    - methodology
    - planning
    - documentation
</rule>
